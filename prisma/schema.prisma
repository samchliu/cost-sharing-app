generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String         @id @default(uuid())
  name          String
  groups        Group[]
  groupUsers    GroupUser[]
  expends       Expend[]
  advancePayers AdvancePayer[]
  payers        Payer[]
}

model Group {
  id         String      @id @default(uuid())
  name       String
  createBy   User        @relation(fields: [createById], references: [id])
  createById String
  groupUsers GroupUser[]
  expends    Expend[]
}

model GroupUser {
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@id([groupId, userId])
}

model Expend {
  id            Int            @id @default(autoincrement())
  name          String
  amount        Float
  group         Group          @relation(fields: [groupId], references: [id])
  groupId       String
  createBy      User           @relation(fields: [createById], references: [id])
  createById    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  advancePayers AdvancePayer[]
  payers        Payer[]
}

model AdvancePayer {
  expand   Expend @relation(fields: [expendId], references: [id])
  expendId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([expendId, userId])
}

model Payer {
  expand   Expend @relation(fields: [expendId], references: [id])
  expendId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([expendId, userId])
}
